// server.js
const path = require('path');
const express = require('express');
const basicAuth = require('express-basic-auth');
const NodeMediaServer = require('node-media-server');

// 1) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞

const ALLOWED_ADMIN_IPS = [
    '10.0.0.2', //NR
    '10.0.0.54', // TA
    '10.0.0.4', // TI
    '10.0.0.17', // Kopilov
    '10.0.0.20', // Kovalev
    '10.0.0.7', // SF
    '10.0.0.45', // Server


]; // –∞–¥–º–∏–Ω—Å–∫–∏–µ IP

const AUTH_USERS = {user1: 'admin', user2: 'pass2'};      // –ª–æ–≥–∏–Ω—ã –∞–¥–º–∏–Ω–æ–≤

// 2) –ó–∞–ø—É—Å–∫–∞–µ–º NodeMediaServer –∫–∞–∫ —Ä–∞–Ω—å—à–µ
/*const nmsConfig = {
    logType: 2,
    rtmp: {port: 1935, chunk_size: 60000, gop_cache: true, ping: 30, ping_timeout: 60},
    http: {port: 8000, allow_origin: '*'}
};*/

const nmsConfig = {
    logType: 2,
    rtmp: {
        port: 1935,
        chunk_size: 4096,
        gop_cache: false,
        ping: 30,
        ping_timeout: 20
    },
    http: {
        port: 8000,
        allow_origin: '*',
        mediaroot: './media', // <--- –¥–æ–±–∞–≤–ª—è–µ–º
        webroot: './public',  // <--- –¥–æ–±–∞–≤–ª—è–µ–º
        api: true,            // <--- –¥–æ–±–∞–≤–ª—è–µ–º API –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ç–æ–∫–æ–≤
        flv: true             // <--- –í–ê–ñ–ù–û! –†–∞–∑—Ä–µ—à–∞–µ–º HTTP-FLV
    },
    trans: {
        ffmpeg: 'ffmpeg',
        tasks: [
            {
                app: 'live',
                mp4: false,
                hls: false,
                dash: false,
                vc: "libx264",
                vcParam: ['-vf', 'scale=w=854:h=480:force_original_aspect_ratio=decrease', '-preset', 'ultrafast', '-tune', 'zerolatency'],
                ac: "aac",
                acParam: ['-ar', '44100', '-b:a', '64k', '-g', '10', '-keyint_min', '30'],
                rtmp: true,
            }
        ]
    }

};

const nms = new NodeMediaServer(nmsConfig);
nms.run();
console.log('‚ñ∂Ô∏è NodeMediaServer –∑–∞–ø—É—â–µ–Ω: RTMP 1935, HTTP-FLV 8000');

// 3) –ó–∞–ø—É—Å–∫–∞–µ–º Express —Ä—è–¥–æ–º
const app = express();
const WEB_PORT = 3000;

// 3a) –§–∏–ª—å—Ç—Ä –ø–æ IP
app.use((req, res, next) => {
    const ip = req.ip.startsWith('::ffff:') ? req.ip.split(':').pop() : req.ip;
    if (!ALLOWED_ADMIN_IPS.includes(ip) && ip !== '127.0.0.1') {
        console.log(`[WEB DENIED] IP ${ip}`);
        return res.status(403).send('Forbidden');
    }
    next();
});

// 3b) Basic Auth –¥–ª—è –≤—Å–µ—Ö –≤–µ–±-–∞–¥–º–∏–Ω–æ–∫
app.use(basicAuth({
    users: AUTH_USERS,
    challenge: true,
    realm: 'Admin Area'
}));

// 3c) –°—Ç–∞—Ç–∏–∫–∞: –æ—Ç–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ flv.js
app.use(express.static(path.join(__dirname, 'public')));

// 3d) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî index.html
// app.get('/', (req, res) => {
//     res.sendFile(path.join(__dirname, 'public', 'index.html'));
// });

// 3e) –ó–∞–ø—É—Å–∫ HTTP-–ø–∞–Ω–µ–ª–∏
app.listen(WEB_PORT, () => {
    console.log(`üåê Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: http://<IP>:${WEB_PORT}/ (Basic Auth + IP filter)`);
});